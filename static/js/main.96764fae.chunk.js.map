{"version":3,"sources":["components/Square.js","components/SideBar.js","components/Board.js","utils/mockdata.js","App.js","reportWebVitals.js","index.js"],"names":["Square","text","areChecked","onChecked","id","allBingoSquaresAreSelected","winnedSquares","squareStyle","classNames","whenAllSquaresCheckedStyle","noId","Number","className","includes","onClick","SideBar","clickHandler","countBingo","Board","items","winPossibilities","useState","squares","setSquares","selectedSquares","setSelectedSquare","setWinnedSquares","winningPossibilities","setWinningPossibility","setCountBingo","startNewGame","setStartNewGame","startNewGameClickHandler","prev","choseItem","useEffect","data","shuffle","reduce","value","index","i","length","intersection","win","splice","addToWinnedSquares","concat","isWin","Object","keys","map","key","e","preventDefault","posibilities","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96764fae.chunk.js","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames';\r\nfunction Square({text, areChecked,onChecked, id, allBingoSquaresAreSelected, winnedSquares}) \r\n{\r\n  let squareStyle=classNames({\r\n      'bingo-square':true,\r\n      'isChecked':false,\r\n      'winned-line':false,\r\n      'shadow-1':true,\r\n      'avenir':true,\r\n      'fw7':true,\r\n      'shadow-hover':true\r\n  })\r\n  let whenAllSquaresCheckedStyle=classNames({\r\n      'bingo-square':true,\r\n      'winned-line':true,\r\n      'all-squares-checked':true\r\n  })\r\n  let noId=Number(id)\r\n\r\n  if(allBingoSquaresAreSelected)\r\n  {\r\n      return(\r\n        <div  className={whenAllSquaresCheckedStyle} >\r\n          {text}\r\n        </div>\r\n      );\r\n  }\r\n\r\n  if(areChecked.includes(noId) && id !== '12' )\r\n   {\r\n      if(winnedSquares.includes(noId) && id !== '12' )\r\n      {   \r\n        squareStyle=classNames({\r\n        'bingo-square':true,\r\n        'isChecked':false,\r\n        'winned-line':true\r\n\r\n        })\r\n      }\r\n      else\r\n      {\r\n        squareStyle=classNames({\r\n          'bingo-square':true,\r\n          'isChecked':true,\r\n          'winned-line':false\r\n        })\r\n      }\r\n    }\r\n  return (\r\n    <>\r\n      {\r\n        id !== '12' ? (\r\n          <div className={squareStyle} onClick={onChecked} >\r\n          {text}\r\n          </div>\r\n        )\r\n        :\r\n        (\r\n          <div className={'bingo-square  bingo-center-square'}>\r\n          {<p className={'grow b-ns light-red'}>Conference Call Bingo</p>}\r\n          </div>\r\n        )\r\n      }\r\n    </>\r\n  );\r\n}\r\nexport default Square;\r\n","import React from 'react'\r\nimport Board from './Board'\r\n\r\n\r\nfunction SideBar({clickHandler, countBingo})\r\n{\r\n\treturn(\r\n\r\n\t\t<div className='sidebar'>\r\n\r\n\t\t        <button className='myy' onClick={clickHandler} >Start</button> \r\n\t\t        <p className='tc light-red'> BINGO:{countBingo}  </p>\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default SideBar","import React, {useState, useEffect} from 'react'\r\nimport shuffle from \"shuffle-array\"\r\nimport Square from './Square'\r\nimport SideBar from './SideBar'\r\nimport {intersection, isEqual} from 'lodash'\r\n\r\nconst Board=({items, winPossibilities})=> \r\n{\r\n\r\n  const [squares, setSquares] = useState({})\r\n  const [selectedSquares, setSelectedSquare] = useState([12])\r\n  const [winnedSquares, setWinnedSquares] = useState([])\r\n  const [winningPossibilities, setWinningPossibility] = useState(winPossibilities) \r\n  const [countBingo, setCountBingo] = useState(0)\r\n  const [startNewGame, setStartNewGame] = useState(false)\r\n\r\n  // to be invoked when user click on 'Start' button to set all states as new game. \r\n  const startNewGameClickHandler=()=>\r\n  {\r\n    setWinningPossibility(winPossibilities)\r\n    setCountBingo(0)\r\n    setSelectedSquare([12])\r\n    setWinnedSquares([])\r\n    setStartNewGame(prev=>{\r\n      return !prev\r\n    })\r\n  }\r\n\r\n  // to be invoked when user click on any bingo square phrase to add this square to SelectedSquares\r\n  const choseItem = (id)=>\r\n  {\r\n    if (selectedSquares.includes(Number(id))) return null\r\n    setSelectedSquare([...selectedSquares, Number(id)])    \r\n  }\r\n\r\n  // randomly arrange all bingo items \r\n  useEffect(() => \r\n  {\r\n    choseItem(12)\r\n    const data = shuffle(items).reduce(\r\n      (data, value, index) => ({ ...data, [index]: value }),\r\n      {}    \r\n    );\r\n    setSquares(data)\r\n  }, [startNewGame])\r\n\r\n  useEffect(()=> \r\n  {\r\n    const isWin = (selectedSquares) => \r\n    {\r\n      \r\n      for (let i = 0; i < winningPossibilities.length; i++) \r\n      {\r\n        if (intersection(selectedSquares, winningPossibilities[i]).length > 4) \r\n        {\r\n          let win = winningPossibilities[i]\r\n          setCountBingo(prev=>{\r\n            return prev +1\r\n          })\r\n          //remove this possibilty from winning possibilties array\r\n          winningPossibilities.splice(i,1 )\r\n          setWinningPossibility(winningPossibilities)\r\n          const addToWinnedSquares = winnedSquares.concat(win)\r\n          setWinnedSquares(addToWinnedSquares)\r\n          return true\r\n         }\r\n      }\r\n      return false\r\n    }     \r\n    isWin(selectedSquares)\r\n  },[selectedSquares])\r\n\r\n  // to be invoked whenever the user have selected all the 25 bingo squares. \r\n  if (selectedSquares.length>24) \r\n  {\r\n\r\n    return (\r\n      <>\r\n      <button onClick={startNewGameClickHandler} >Start a game</button>\r\n       <main>\r\n        {Object.keys(squares).map(key => (\r\n          <Square key={key} id={key}  allBingoSquaresAreSelected={true} text={squares[key]}/>\r\n       ))}\r\n       </main>\r\n       </>\r\n    )\r\n  }\r\n \r\n  return (\r\n    <div className='main-container'>\r\n      <SideBar clickHandler={startNewGameClickHandler} countBingo={countBingo} />\r\n      <main className='board'>\r\n      {\r\n          Object.keys(squares).map(key => (\r\n          <Square key={key} id={key} text={squares[key]} areChecked={selectedSquares}  onChecked={(e)=> {\r\n               e.preventDefault()\r\n               choseItem(key)} \r\n              } winnedSquares={winnedSquares} />  \r\n          )\r\n         )\r\n      }\r\n      </main>\r\n    </div>\r\n    )\r\n}\r\nexport default Board;\r\n","export const items = [\r\n'Next slide, please',\r\n\"No, it's still loading\",\r\n'Sorry, go ahead..',\r\n'Sorry, I was on mute',\r\n'Can everyone see my screen?',\r\n'I was having connection issues!',\r\n'Questions ?? anyone',\r\n'can you hear me?',\r\n\"I think there's a lag\",\r\n\"Ok, let's get started\",\r\n'How are you doing?',\r\n'Let me share my screen',\r\n'Sorry, I missed it, could you repeat?',\r\n\"I'll have to get back to you on that\",\r\n\"Can everyone go on mute?\",\r\n'......, Are you there?',\r\n'Animal noise',\r\n'kids sound',\r\n'Can we take this offline?',\r\n\"Sorry, I'm late\",\r\n'Can you hear me now?',\r\n'I have to jump another call',\r\n'Echo noise',\r\n'Can we take a step back?',\r\n'Sounds great',\r\n];\r\n\r\nexport const posibilities = [\r\n  [0,1,2,3,4],\r\n  [5,6,7,8,9],\r\n  [12,10,11,13,14],\r\n  [15,16,17,18,19],\r\n  [20,21,22,23,24],\r\n  [12, 0, 6, 18, 24],\r\n  [12, 4, 8, 16, 20],\r\n  [0, 5, 10, 15, 20],\r\n  [1, 6, 11, 16, 21],\r\n  [12, 2, 7, 17, 22],\r\n  [3, 8, 13, 18, 23],\r\n  [4, 9, 14, 19, 24]\r\n]\r\n\r\n","import './App.css'\nimport Board from './components/Board'\nimport {items, posibilities} from './utils/mockdata'\nimport 'tachyons';\n\nfunction App()\n {\n  return (\n    <div className=\"App\">    \n    \t\t\n            <Board items={items} winPossibilities={posibilities}></Board>        \n    </div>\n  );\n }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}